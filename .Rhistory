}
num.vertices.raices <- c()
for (vertice in Raices$id){
num.vertices.raices <- c(num.vertices.raices,which(metricas.red$id == vertice))
}
# Compute leaves SAP
SAP_hojas <- c()
for (vert in Hojas$id){
h <- igraph::get.all.shortest.paths(graph,
from = vert,
to   = Raices$id,
mode = "out")
SAP_hojas   <- c(SAP_hojas, length(h[[1]]))
}
Hojas <- Hojas %>%
mutate(SAP = SAP_hojas) %>%
arrange(desc(SAP))
Hojas <- Hojas[1:60,] %>%
filter(SAP > 0)
Caminos <- c()
for (vert in Hojas$id){
for (raiz in Raices$id){
h <- get.all.shortest.paths(graph,
from = vert,
to   = raiz,
mode = "out")
lista.nodos <- unique(unlist(h[1]))
lista.nodos <- lista.nodos[!(lista.nodos %in% num.vertices.raices)]
lista.nodos <- lista.nodos[!(lista.nodos %in% num.vertices.hojas)]
metricas.red$SAP[lista.nodos] <- Raices[Raices$id == raiz,2]+Hojas[Hojas$id == vert,5]
Caminos     <- c(Caminos,lista.nodos)
}
}
# Trunk Clasification
Tronco     <- metricas.red[unique(Caminos), c("id","indegree","year","SAP")]
mas.nuevo  <- max(Tronco$year, na.rm = TRUE)
Tronco$SAP <- as.numeric(Tronco$SAP)
Tronco     <- Tronco %>%
mutate(antiguedad = mas.nuevo - year) %>%
arrange(desc((SAP)))
# Tree of science
Raices$TOS <- "Root"
Hojas$TOS  <- "Leaves"
Tronco$TOS <- "Trunk"
TOS   <- rbind(Raices[,c(1,2,3)], Tronco[,c(1,4,6)], Hojas[,c(1,5,6)])
edgelista    <- as_tibble(igraph::as_data_frame(graph , what = "edges"))
edgelist.tos <- edgelista[edgelista$to %in% TOS$id,]
edgelist.tos <- edgelist.tos[(edgelist.tos$from %in% TOS$id),]
graph.tos    <- graph.data.frame(edgelist.tos, directed = TRUE, vertices = TOS)
TOS <- list("TOS"  = TOS, "graph" = graph.tos)
return(TOS)
}
tos.txt <- function(graph_2){
# Se crean la metricas de la red
act.year  <- as.numeric(format(Sys.Date(),'%Y'))
metricas.red <- tibble(
id        = V(graph_2)$name,
indegree  = degree(graph_2, mode = "in"),
outdegree = degree(graph_2, mode = "out"),
bet       = betweenness(graph_2))
metricas.red <- metricas.red %>%
mutate(year = as.numeric(str_extract(id, "[0-9]{4}")))
metricas.red$SAP <- NA
metricas.red$year[metricas.red$year > act.year] <- NA
# Clasificacion de las raices
Raices <- metricas.red[metricas.red$outdegree == 0, c("id","indegree")] %>%
arrange(desc(indegree))
Raices <- Raices[1:10,]
names(Raices)[names(Raices) == 'indegree'] <- 'SAP'
# Clasificacion de las hojas
Hojas.ext <- metricas.red[metricas.red$indegree == 0, c("id","outdegree","year")]
Hojas.ext <- Hojas.ext %>%
mutate(antiguedad = act.year - year) %>%
arrange(antiguedad)
Hojas     <- filter(Hojas.ext, antiguedad <= 5)
# Se determina el numero del vertice de las Hojas
num.vertices.hojas <- c()
for (vertice in Hojas$id){
num.vertices.hojas <- c(num.vertices.hojas,which(metricas.red$id == vertice))
}
# Se determina el numero del vertice de las raices
num.vertices.raices <- c()
for (vertice in Raices$id){
num.vertices.raices <- c(num.vertices.raices,which(metricas.red$id == vertice))
}
# Calculo del SAP de las Hojas
SAP_hojas <- c()
for (vert in Hojas$id){
h <- get.all.shortest.paths(graph_2,
from = vert,
to   = Raices$id,
mode = "out")
SAP_hojas   <- c(SAP_hojas, length(h[[1]]))
}
Hojas <- Hojas %>%
mutate(SAP = SAP_hojas) %>%
arrange(desc(SAP))
Hojas <- Hojas[1:60,] %>%
filter(SAP > 0)
Caminos <- c()
for (vert in Hojas$id){
for (raiz in Raices$id){
h <- get.all.shortest.paths(graph_2,
from = vert,
to   = raiz,
mode = "out")
lista.nodos <- unique(unlist(h[1]))
lista.nodos <- lista.nodos[!(lista.nodos %in% num.vertices.raices)]
lista.nodos <- lista.nodos[!(lista.nodos %in% num.vertices.hojas)]
metricas.red$SAP[lista.nodos] <- Raices[Raices$id == raiz,2]+Hojas[Hojas$id == vert,5]
Caminos     <- c(Caminos,lista.nodos)
}
}
# Seleccion del tronco
Tronco     <- metricas.red[unique(Caminos), c("id","indegree","year","SAP")]
mas.nuevo  <- max(Tronco$year, na.rm = TRUE)
Tronco$SAP <- as.numeric(Tronco$SAP)
Tronco     <- Tronco %>%
mutate(antiguedad = mas.nuevo - year) %>%
arrange(desc((SAP)))
# Tree of science
Raices$TOS <- "Root"
Hojas$TOS  <- "Leaves"
Tronco$TOS <- "Trunk"
TOS   <- rbind(Raices[,c(1,2,3)], Tronco[,c(1,4,6)], Hojas[,c(1,5,6)])
edgelista    <- as_tibble(igraph::as_data_frame(graph_2 , what = "edges"))
edgelist.tos <- edgelista[edgelista$to %in% TOS$id,]
edgelist.tos <- edgelist.tos[(edgelist.tos$from %in% TOS$id),]
graph.tos    <- graph.data.frame(edgelist.tos, directed = TRUE, vertices = TOS)
TOS <- list("TOS"  = TOS, "graph" = graph.tos)
return(TOS)
}
TOS.process <- function(metricas, metricasi, g){
act.year <- as.numeric(format(Sys.Date(),'%Y'))
Raices   <- metricasi[metricasi$outdegree == 0, c("id","indegree")] %>%
arrange(desc(indegree))
Raices <- Raices[1:10,]
names(Raices)[names(Raices) == 'indegree'] <- 'SAP'
# Clasificacion de las hojas
Hojas.ext <- metricasi[metricasi$indegree == 0, c("id","outdegree","year")]
Hojas.ext <- Hojas.ext %>%
mutate(antiguedad = act.year - year) %>%
arrange(antiguedad)
Hojas     <- filter(Hojas.ext, antiguedad <= 5)
# Se determina el numero del vertice de las Hojas
num.vertices.hojas <- c()
for (vertice in Hojas$id){
num.vertices.hojas <- c(num.vertices.hojas,which(metricas$id == vertice))
}
# Calculo del SAP de las Hojas
SAP_hojas <- c()
for (vert in Hojas$id){
h <- get.all.shortest.paths(g,
from = vert,
to   = Raices$id,
mode = "out")
SAP_hojas   <- c(SAP_hojas, length(h[[1]]))
}
Hojas <- Hojas %>%
mutate(SAP = SAP_hojas) %>%
arrange(desc(SAP))
Hojas <- Hojas[1:60,] %>%
filter(SAP > 0)
# Se determina el numero del vertice de las raices
num.vertices.raices <- c()
for (vertice in Raices$id){
num.vertices.raices <- c(num.vertices.raices,which(metricas$id == vertice))
}
Caminos <- c()
for (vert in Hojas$id){
for (raiz in Raices$id){
h <- get.all.shortest.paths(g,
from = vert,
to   = raiz,
mode = "out")
lista.nodos <- unique(unlist(h[1]))
lista.nodos <- lista.nodos[!(lista.nodos %in% num.vertices.raices)]
lista.nodos <- lista.nodos[!(lista.nodos %in% num.vertices.hojas)]
metricas$SAP[lista.nodos] <- Raices[Raices$id == raiz,2]+Hojas[Hojas$id == vert,5]
Caminos     <- c(Caminos,lista.nodos)
}
}
Tronco     <- metricas[unique(Caminos), c("id","indegree","year","SAP")]
if (length(Tronco$id) == 0){
Raices$TOS <- "Root"
Hojas$TOS  <- "Leaves"
TOSi       <- rbind(Raices[,c(1,2,3)], Hojas[,c(1,5,6)])
} else{
mas.nuevo  <- max(Tronco$year, na.rm = TRUE)
Tronco$SAP <- as.numeric(Tronco$SAP)
Tronco     <- Tronco %>%
mutate(antiguedad = mas.nuevo - year) %>%
arrange(desc((SAP)))
# Tree of science
Raices$TOS <- "Root"
Hojas$TOS  <- "Leaves"
Tronco$TOS <- "Trunk"
TOSi   <- rbind(Raices[,c(1,2,3)], Tronco[,c(1,4,6)], Hojas[,c(1,5,6)])
}
return(TOSi)
}
# -----------------------------
df  <- tosr_load(c('save.txt','save3.txt','scopus.bib'))
g   <- tosr_graph(df)
tos <- tosr_process(g)
node_cite <- g$node_cite
tos$cite <- node_cite$CITE[node_cite$ID_TOS %in% tos$id]
tos <- tosr_process(g)
node_cite$CITE[node_cite$ID_TOS %in% tos$id[1]]
tos$cite <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[1]]
tos$cite <- NA
tos$cite<- NA
for (i in range(length(tos$id))){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[1]]
}
tos$cite<- NA
for (i in range(length(tos$id))){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
for (i in seq(length(tos$id))){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
# -----------------------------
df  <- tosr_load(c('scopus.bib'))
g   <- tosr_graph(df)
tos <- tosr_process(g)
node_cite <- g$node_cite
tos$cite<- NA
for (i in seq(length(tos$id))){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
i
node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
tos$id[i]
node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
node_cite$CITE[node_cite$ID_TOS == tos$id]
node_cite$ID_TOS[5]
node_cite$ID_TOS[4]
node_cite <- g$node_cite
tos$cite<- NA
for (i in seq(length(tos$id))){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
node_cite$ID_TOS[3437]
tos$cite<- NA
for (i in seq(length(tos$id))){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
node_cite$ID_TOS
node_cite$ID_TOS[3437]
View(node_cite)
tos$cite<- NA
for (i in seq(length(tos$id))){
tos$cite[i] <- node_cite$CITE[tos$id[i] %in% node_cite$ID_TOS ]
}
tos$cite<- NA
for (i in seq(length(tos$id))){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS == tos$id[i]]
}
tos$id[i]
'LESTER HC, 1993,' == node_cite$ID_TOS
sum('LESTER HC, 1993,' == node_cite$ID_TOS)
sum('LESTER HC, 1993, ' == node_cite$ID_TOS)
sum('LESTER HC, 1993' == node_cite$ID_TOS)
sum(' LESTER HC, 1993,' == node_cite$ID_TOS)
str_trim(node_cite$ID_TOS, side = "left")
node_cite <- g$node_cite
node_cite$ID_TOS <- str_trim(node_cite$ID_TOS, side = "left")
tos$cite<- NA
for (i in seq(length(tos$id))){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS == tos$id[i]]
}
for (i in seq(length(tos$id))){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
for (i in seq(length(tos$id))){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
sum(' LESTER HC, 1993,' == node_cite$ID_TOS)
sum('LESTER HC, 1993,' == node_cite$ID_TOS)
sum('LESTER HC, 1993,' %in% node_cite$ID_TOS)
tos$id <- str_trim(tos$id, side = "left")
tos$cite<- NA
for (i in seq(length(tos$id))){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
i
node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
tos$id[i]
len(node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]])
length(node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]])
tos$cite<- NA
for (i in seq(length(tos$id))){
name <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
if (length(name) == 0){
tos$cite[i] <- tos$cite[i]
} else {
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
}
warnings()
tos$cite<- NA
for (i in seq(length(tos$id))){
name <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
if (length(name) == 0){
tos$cite[i] <- tos$cite[i]
}
if (length(name) == 1){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
}
for (i in seq(length(tos$id))){
name <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
if (length(name) == 0){
tos$cite[i] <- tos$cite[i]
}
if (length(name) == 1){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
if (length(name) == 2){
print(i)
}
}
tos$cite<- NA
for (i in seq(length(tos$id))){
name <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
if (length(name) == 0){
tos$cite[i] <- tos$cite[i]
}
if (length(name) == 1){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
if (length(name) == 2){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]][[1]]
}
}
tos$cite<- NA
for (i in seq(length(tos$id))){
name <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
if (length(name) == 0){
tos$cite[i] <- tos$cite[i]
}
if (length(name) == 1){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
if (length(name) == 2){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]][[1]]
}
if (length(name) == 3){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]][[1]]
}
}
for (i in seq(length(tos$id))){
name <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
if (length(name) == 0){
tos$cite[i] <- tos$cite[i]
print(i)
}
if (length(name) == 1){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
if (length(name) == 2){
tos$cite[i] <- name[[1]]
}
if (length(name) == 3){
tos$cite[i] <- name[[1]]
}
}
tos$cite<- NA
for (i in seq(length(tos$id))){
name <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
if (length(name) == 0){
tos$cite[i] <- tos$id[i]
print(i)
}
if (length(name) == 1){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
if (length(name) == 2){
tos$cite[i] <- name[[1]]
}
if (length(name) == 3){
tos$cite[i] <- name[[1]]
}
}
for (i in seq(length(tos$id))){
name <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
if (length(name) == 0){
tos$cite[i] <- tos$id[i]
}
if (length(name) == 1){
tos$cite[i] <- node_cite$CITE[node_cite$ID_TOS %in% tos$id[i]]
}
if (length(name) == 2){
tos$cite[i] <- name[[1]]
}
if (length(name) == 3){
tos$cite[i] <- name[[1]]
}
}
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
library(tosr)
tosr('save.txt','scopus.bib')
devtools::check()
devtools::check()
devtools::check()
getwd()
setwd("/Volumes/GoogleDrive/My Drive/C. EXTENSION/Packages training/package_13/tosr")
devtools::check()
install.packages("available")
library(available)
available("tosr")
tidyverse?x
tidyverse?
hepl(package = "tidyverse")
help(package = "tidyverse")
library(devtools)
install.packages("devtools")
library(roxygen2)
library(testthat)
devtools::session_info()
packageVersion("devtools")
#> [1] '2.4.1.9000'
packageVersion("devtools")
#> [1] '2.4.1.9000'
packageVersion("devtools")
#> [1] '2.4.1.9000'
library(tidyverse)
library(fs)
devtools::check()
install.packages("CINNA")
install.packages("tm")
install.packages("bibliometrix")
install.packages("bibliometrix")
library(CINNA)
install.packages("CINNA")
library(CINNA)
install.packages("rebus")
library(rebus.base)
library(rebus)
(a <- factor(c("character", "hits", "your", "eyeballs")))
(b <- factor(c("but", "integer", "where it", "counts")))
c(a, b)
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
install.packages("MASS")
?load_all
??load_all
library(devtools)
load_all()
tosR("data/my_tosr_load.rda")
tosr::.data
tosR("/Users/sebastianrobledo/Downloads/Scientometrics_293.txt")
arbol <- tosR("/Users/sebastianrobledo/Downloads/Scientometrics_293.txt")
arbol |> View()
library(tosr)
devtools::install()
devtools::install()
devtools::check()
arbol_wos_scopus <- tosR("/Users/sebastianrobledo/Downloads/Scientometrics_293.txt", "/Users/sebastianrobledo/Downloads/Scientometrics_541_Scopus.bib")
library(bibliometrix)
arbol_wos_scopus <- tosR("/Users/sebastianrobledo/Downloads/Scientometrics_293.txt", "/Users/sebastianrobledo/Downloads/Scientometrics_541_Scopus.bib")
arbol_wos_scopus |> View()
test()
devtoll
devtools::check(remote = TRUE)
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
library(devtools)
load_all()
.libPaths()
devtools::release()
devtools::check()
library(usethis)
library(devtools)
usethis::use_release_issue()
?gh_token_help
?use_release_issue
usethis::use_release_issue()
devtools::check(remote = T)
devtools::check_win_devel()
install.packages("rhub")
library(rhub)
rhub::check_for_cran()
?rhub::check
rhub::check(platform = "ubuntu-rchk")
rhub::check_with_sanitizers()
?usethis::use_version()
usethis::use_version()
devtools::submit_cran()
library(usethis)
usethis::use_mit_license("tosr")
?use_mit_license
usethis::use_mit_license("Centro de Bioinformática y Biología Computacional de Colombia - BIOS")
usethis::use_release_issue()
usethis::use_cran_comments()
devtools::check(remote = TRUE)
devtools::check(remote = TRUE)
devtools::check(remote = TRUE)
devtools::submit_cran()
devtools::check(remote = TRUE)
devtools::check(remote = TRUE)
devtools::check(remote = TRUE)
devtools::check(remote = TRUE)
devtools::submit_cran()
